active passive high availability
1-)setup  streaming replication between odroid A and B

# Configuring Primary Node
# You can configure the primary node for streaming replication by carrying out the following steps:

# Step 1: Initialize the Database

################### odroid A #######################

#you can create a new user with replication privileges :
#enter the  docker postgres image
docker exec -it ... 
createuser -U  postgres -P -c 1000 --replication replicationUser


#go to  /var/lib/docker/volumes/docker-compose_postgres/_data/

# change : pg_hba.conf

# TYPE  DATABASE        USER            ADDRESS                 METHOD
host   replication     replicationUser      0.0.0.0/0           trust

# "local" is for Unix domain socket connections only
local   all             all                                     trust
# IPv4 local connections:
host    all             all             0.0.0.0/0            trust
# IPv6 local connections:
host    all             all             ::1/128                 trust
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     trust
host    replication     all             0.0.0.0/0            trust
host    replication     all             ::1/128                 trust




#add to postgresql.conf  
wal_level = replica
wal_log_hints = on
max_wal_senders = 10

# then restart postgresql
docker-compose restart postgres 

enter docker psql -U postgres first execution for public schema then changed it to chft1 schema  :

DO $$ 
DECLARE 
    table_record RECORD;
BEGIN 
    -- Iterate over all tables in the specified schema
    FOR table_record IN 
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_type = 'BASE TABLE' 
    LOOP 
        -- Generate and execute the GRANT statement for the current table
        EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE ' || 'public.' || table_record.table_name || ' TO "replicationUser"';
    END LOOP;
END $$;


################### odroid B #######################
 # change : pg_hba.conf same as odroid A
 # add to postgresql.conf -> 
 wal_level = replica
hot_standby = on
max_wal_senders = 10  

enter also postgres by docker exec .......

cd /var/lib/postgresql... ->  rm -rf *

pg_basebackup -h 192.168.0.175 -U replicationUser -D /var/lib/postgresql/data/ -Fp -Xs -R 
pg_basebackup -h localhost -U replicationUser -p 5433 -D /var/lib/postgresql/data/ -Fp -Xs -R 

# test :

# create table on postgres A it will appear on B
if A go down  you can now go to B enter docker...

runuser -u postgres -- pg_ctl promote

2-)setup rsync replication and use cron to schedule it for replication every 15 min

############### go to remote server #############
sudo apt install rsync
rsync --version


sudo nano /etc/rsyncd.conf 
# /etc/rsyncd.conf
#pid file = /var/run/rsyncd.pid
#lock file = /var/run/rsync.lock
#log file = /var/log/rsync.log

[backup]
path = /home/backup
comment = Rsync backup directory
read only = no
uid= root
gid= root



sudo systemctl enable rsync 
sudo systemctl start rsync 




 ###################### in odroids#############
 we can now make 
to test:
rsync -av [testrsync (file or folder)]  rsync://gateway.do.bluemint.ai/backup/



- for production :
sudo su 

crontab -e 
*/15 * * * * /home/odroid/scripts/backup/backup.sh


- in /home/odroid/scripts/backup/backup.sh :

#!/bin/bash

# Source directory
SOURCE_DIR="/var/lib/docker/volumes/docker-compose_postgres/_data"

# Destination directory on remote server
REMOTE_DIR="rsync://gateway.do.bluemint.ai/backup/danaoffice/" # in gateway we specify the office what we want

# rsync command
sudo rsync -av --delete $SOURCE_DIR $REMOTE_DIR

# # go to remote if i want to extract data first we tar and gzip then scp to odroid  :

# tar -cvf danadata.tar -C _data/ .
# # go to odroid 
# scp -P 443 root@gateway.do.bluemint.ai:/home/backup/danaoffice/danadata.tar.gz /home/odroid/

# # extract to tst folder 
#  tar -xzf danadata.tar.gz -C tst/
